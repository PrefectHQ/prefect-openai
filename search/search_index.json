{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prefect-openai","text":""},{"location":"#welcome","title":"Welcome!","text":"<p>Prefect integrations for working with OpenAI.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#python-setup","title":"Python setup","text":"<p>Requires an installation of Python 3.7+.</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-openai</code> with <code>pip</code>:</p> <pre><code>pip install prefect-openai\n</code></pre> <p>A list of available blocks in <code>prefect-openai</code> and their setup instructions can be found here.</p>"},{"location":"#write-and-run-a-flow","title":"Write and run a flow","text":"<p>Retrieve the flow run name to create a story about it and an image using that story.</p> <pre><code>from prefect import flow, get_run_logger\nfrom prefect.context import get_run_context\nfrom prefect_openai import OpenAICredentials, ImageModel, CompletionModel\n\n@flow\ndef create_story_and_image_from_flow_run_name():\n    logger = get_run_logger()\n    context = get_run_context()\n    flow_run_name = context.flow_run.name.replace(\"-\", \" \")\n\n    credentials = OpenAICredentials.load(\"my-block\")\n\n    text_model = CompletionModel(openai_credentials=credentials, model=\"text-ada-001\")\n    text_prompt = f\"Story about a {flow_run_name}\"\n    text_result = text_model.submit_prompt(text_prompt)\n\n    image_prompt = text_result.choices[0].text.strip()\n    image_model = ImageModel(openai_credentials=credentials)\n    image_result = image_model.submit_prompt(image_prompt)\n    image_url = image_result.data[0][\"url\"]\n\n    logger.info(\n        f\"The story behind the image, {image_prompt!r}, \"\n        f\"check it out here: {image_url}\"\n    )\n    return image_url\n\ncreate_image()\n</code></pre> <p>For example, a flow run named <code>space-orangutan</code> prompted a story about \"A space orangutan is a species of monkey that live in and...\" yielding this image: </p> <p>For more tips on how to use tasks and flows in a Collection, check out Using Collections!</p>"},{"location":"#blocks-catalog","title":"Blocks Catalog","text":"<p>Below is a list of Blocks available for registration in <code>prefect-openai</code>.</p> <p>To register blocks in this module to view and edit them on Prefect Cloud: <pre><code>prefect block register -m prefect_openai\n</code></pre> Note, to use the <code>load</code> method on Blocks, you must already have a block document saved through code or saved through the UI.</p>"},{"location":"#credentials-module","title":"Credentials Module","text":"<ul> <li>OpenAICredentials</li> </ul> <p>To load the OpenAICredentials: <pre><code>from prefect import flow\nfrom prefect_openai.credentials import OpenAICredentials\n\n@flow\ndef my_flow():\n    my_block = OpenAICredentials.load(\"MY_BLOCK_NAME\")\n\nmy_flow()\n</code></pre></p>"},{"location":"#completion-module","title":"Completion Module","text":"<ul> <li>CompletionModel</li> </ul> <p>To load the CompletionModel: <pre><code>from prefect import flow\nfrom prefect_openai.completion import CompletionModel\n\n@flow\ndef my_flow():\n    my_block = CompletionModel.load(\"MY_BLOCK_NAME\")\n\nmy_flow()\n</code></pre></p>"},{"location":"#image-module","title":"Image Module","text":"<ul> <li>ImageModel</li> </ul> <p>To load the ImageModel: <pre><code>from prefect import flow\nfrom prefect_openai.image import ImageModel\n\n@flow\ndef my_flow():\n    my_block = ImageModel.load(\"MY_BLOCK_NAME\")\n\nmy_flow()\n</code></pre></p>"},{"location":"#resources","title":"Resources","text":"<p>If you encounter any bugs while using <code>prefect-openai</code>, feel free to open an issue in the prefect-openai repository.</p> <p>If you have any questions or issues while using <code>prefect-openai</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community.</p> <p>Feel free to star or watch <code>prefect-openai</code> for updates too!</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you'd like to help contribute to fix an issue or add a feature to <code>prefect-openai</code>, please propose changes through a pull request from a fork of the repository.</p> <p>Here are the steps:</p> <ol> <li>Fork the repository</li> <li>Clone the forked repository</li> <li>Install the repository and its dependencies: <pre><code>pip install -e \".[dev]\"\n</code></pre></li> <li>Make desired changes</li> <li>Add tests</li> <li>Insert an entry to CHANGELOG.md</li> <li>Install <code>pre-commit</code> to perform quality checks prior to commit: <pre><code>pre-commit install\n</code></pre></li> <li><code>git commit</code>, <code>git push</code>, and create a pull request</li> </ol>"},{"location":"completion/","title":"Completion","text":""},{"location":"completion/#prefect_openai.completion","title":"<code>prefect_openai.completion</code>","text":"<p>Module for generating and configuring OpenAI completions.</p>"},{"location":"completion/#prefect_openai.completion-classes","title":"Classes","text":""},{"location":"completion/#prefect_openai.completion.CompletionModel","title":"<code>CompletionModel</code>","text":"<p>         Bases: <code>Block</code></p> <p>A block that contains config for an OpenAI Completion Model.</p> <p>Attributes:</p> Name Type Description <code>openai_credentials</code> <code>OpenAICredentials</code> <p>The credentials used to authenticate with OpenAI.</p> <code>model</code> <code>str</code> <p>ID of the model to use.</p> <code>temperature</code> <code>float</code> <p>The temperature of the model.</p> <code>max_tokens</code> <code>int</code> <p>The maximum number of tokens to generate.</p> <code>suffix</code> <code>Optional[str]</code> <p>The suffix to append to the prompt.</p> <code>echo</code> <code>bool</code> <p>Whether to echo the prompt.</p> <code>timeout</code> <code>Optional[float]</code> <p>The maximum time to wait for the model to warm up.</p> Example <p>Load a configured block: <pre><code>from prefect_openai import CompletionModel\n\ncompletion_model = CompletionModel.load(\"BLOCK_NAME\")\n</code></pre></p> Source code in <code>prefect_openai/completion.py</code> <pre><code>class CompletionModel(Block):\n\"\"\"\n    A block that contains config for an OpenAI Completion Model.\n\n    Attributes:\n        openai_credentials: The credentials used to authenticate with OpenAI.\n        model: ID of the model to use.\n        temperature: The temperature of the model.\n        max_tokens: The maximum number of tokens to generate.\n        suffix: The suffix to append to the prompt.\n        echo: Whether to echo the prompt.\n        timeout: The maximum time to wait for the model to warm up.\n\n    Example:\n        Load a configured block:\n        ```python\n        from prefect_openai import CompletionModel\n\n        completion_model = CompletionModel.load(\"BLOCK_NAME\")\n        ```\n    \"\"\"\n\n    openai_credentials: OpenAICredentials = Field(\n        default=..., description=\"The credentials used to authenticate with OpenAI.\"\n    )\n    model: str = Field(default=\"text-curie-001\", description=\"ID of the model to use.\")\n    temperature: float = Field(default=0.5, description=\"The temperature of the model.\")\n    max_tokens: int = Field(\n        default=16, description=\"The maximum number of tokens to generate.\"\n    )\n    suffix: Optional[str] = Field(\n        default=None, description=\"The suffix to append to the prompt.\"\n    )\n    echo: bool = Field(default=False, description=\"Whether to echo the prompt.\")\n    timeout: Optional[float] = Field(\n        default=None, description=\"The maximum time to wait for the model to warm up.\"\n    )\n\n    _block_type_name = \"OpenAI Completion Model\"\n    _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/QE8JwcbZBmIfiognXDLcY/2bcd4c759f877d37159f576101218b49/open-ai-logo-8B9BFEDC26-seeklogo.com.png?h=250\"  # noqa\n\n    @property\n    def logger(self) -&gt; Logger:\n\"\"\"\n        Returns a logger based on whether the CompletionModel\n        is called from within a flow or task run context.\n        If a run context is present, the logger property returns a run logger.\n        Else, it returns a default logger labeled with the class's name.\n        Returns:\n            The run logger or a default logger with the class's name.\n        \"\"\"\n        try:\n            return get_run_logger()\n        except MissingContextError:\n            return get_logger(self.__class__.__name__)\n\n    @sync_compatible\n    async def submit_prompt(\n        self, prompt: str, **acreate_kwargs: Dict[str, Any]\n    ) -&gt; OpenAIObject:\n\"\"\"\n        Submits a prompt for the model to generate a text completion.\n        OpenAI will return an object potentially containing multiple `choices`,\n        where the zeroth index is what they consider the \"best\" completion.\n        Learn more in the [OpenAPI Text Completion docs](\n            https://beta.openai.com/docs/guides/completion)\n\n        Args:\n            prompt: The prompt to use for the completion.\n            **acreate_kwargs: Additional keyword arguments to pass\n                to [`openai.Completion.acreate`](\n                https://beta.openai.com/docs/api-reference/completions/create).\n\n        Returns:\n            The OpenAIObject containing the completion and associated metadata.\n\n        Example:\n            Create an OpenAI Completion given a prompt:\n            ```python\n            from prefect import flow\n            from prefect_openai import CompletionModel, OpenAICredentials\n\n            @flow(log_prints=True)\n            def my_ai_bot(model_name: str = \"text-davinci-003\")\n                credentials = OpenAICredentials.load(\"my-openai-creds\")\n\n                completion_model = CompletionModel(\n                    openai_credentials=credentials,\n                )\n\n                for prompt in [\"hi!\", \"what is the meaning of life?\"]:\n                    completion = completion_model.submit_prompt(prompt)\n                    print(completion.choices[0].text)\n            ```\n        \"\"\"\n        client = self.openai_credentials.get_client()\n\n        input_kwargs = dict(\n            model=self.model,\n            temperature=self.temperature,\n            max_tokens=self.max_tokens,\n            suffix=self.suffix,\n            echo=self.echo,\n            timeout=self.timeout,\n        )\n        input_kwargs.update(acreate_kwargs)\n\n        creation = await client.Completion.acreate(prompt=prompt, **input_kwargs)\n        total_tokens = creation.usage[\"total_tokens\"]\n        num_choices = len(creation.choices)\n        self.logger.info(\n            f\"Finished text completion using the {self.model!r} \"\n            f\"model with {total_tokens} tokens, creating {num_choices} choice(s).\"\n        )\n        return creation\n</code></pre>"},{"location":"completion/#prefect_openai.completion.CompletionModel-attributes","title":"Attributes","text":""},{"location":"completion/#prefect_openai.completion.CompletionModel.logger","title":"<code>logger: Logger</code>  <code>property</code>","text":"<p>Returns a logger based on whether the CompletionModel is called from within a flow or task run context. If a run context is present, the logger property returns a run logger. Else, it returns a default logger labeled with the class's name.</p> <p>Returns:</p> Type Description <code>Logger</code> <p>The run logger or a default logger with the class's name.</p>"},{"location":"completion/#prefect_openai.completion.CompletionModel-functions","title":"Functions","text":""},{"location":"completion/#prefect_openai.completion.CompletionModel.submit_prompt","title":"<code>submit_prompt</code>  <code>async</code>","text":"<p>Submits a prompt for the model to generate a text completion. OpenAI will return an object potentially containing multiple <code>choices</code>, where the zeroth index is what they consider the \"best\" completion. Learn more in the OpenAPI Text Completion docs</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>str</code> <p>The prompt to use for the completion.</p> required <code>**acreate_kwargs</code> <code>Dict[str, Any]</code> <p>Additional keyword arguments to pass to <code>openai.Completion.acreate</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>OpenAIObject</code> <p>The OpenAIObject containing the completion and associated metadata.</p> Example <p>Create an OpenAI Completion given a prompt: <pre><code>from prefect import flow\nfrom prefect_openai import CompletionModel, OpenAICredentials\n\n@flow(log_prints=True)\ndef my_ai_bot(model_name: str = \"text-davinci-003\")\n    credentials = OpenAICredentials.load(\"my-openai-creds\")\n\n    completion_model = CompletionModel(\n        openai_credentials=credentials,\n    )\n\n    for prompt in [\"hi!\", \"what is the meaning of life?\"]:\n        completion = completion_model.submit_prompt(prompt)\n        print(completion.choices[0].text)\n</code></pre></p> Source code in <code>prefect_openai/completion.py</code> <pre><code>@sync_compatible\nasync def submit_prompt(\n    self, prompt: str, **acreate_kwargs: Dict[str, Any]\n) -&gt; OpenAIObject:\n\"\"\"\n    Submits a prompt for the model to generate a text completion.\n    OpenAI will return an object potentially containing multiple `choices`,\n    where the zeroth index is what they consider the \"best\" completion.\n    Learn more in the [OpenAPI Text Completion docs](\n        https://beta.openai.com/docs/guides/completion)\n\n    Args:\n        prompt: The prompt to use for the completion.\n        **acreate_kwargs: Additional keyword arguments to pass\n            to [`openai.Completion.acreate`](\n            https://beta.openai.com/docs/api-reference/completions/create).\n\n    Returns:\n        The OpenAIObject containing the completion and associated metadata.\n\n    Example:\n        Create an OpenAI Completion given a prompt:\n        ```python\n        from prefect import flow\n        from prefect_openai import CompletionModel, OpenAICredentials\n\n        @flow(log_prints=True)\n        def my_ai_bot(model_name: str = \"text-davinci-003\")\n            credentials = OpenAICredentials.load(\"my-openai-creds\")\n\n            completion_model = CompletionModel(\n                openai_credentials=credentials,\n            )\n\n            for prompt in [\"hi!\", \"what is the meaning of life?\"]:\n                completion = completion_model.submit_prompt(prompt)\n                print(completion.choices[0].text)\n        ```\n    \"\"\"\n    client = self.openai_credentials.get_client()\n\n    input_kwargs = dict(\n        model=self.model,\n        temperature=self.temperature,\n        max_tokens=self.max_tokens,\n        suffix=self.suffix,\n        echo=self.echo,\n        timeout=self.timeout,\n    )\n    input_kwargs.update(acreate_kwargs)\n\n    creation = await client.Completion.acreate(prompt=prompt, **input_kwargs)\n    total_tokens = creation.usage[\"total_tokens\"]\n    num_choices = len(creation.choices)\n    self.logger.info(\n        f\"Finished text completion using the {self.model!r} \"\n        f\"model with {total_tokens} tokens, creating {num_choices} choice(s).\"\n    )\n    return creation\n</code></pre>"},{"location":"credentials/","title":"Credentials","text":""},{"location":"credentials/#prefect_openai.credentials","title":"<code>prefect_openai.credentials</code>","text":"<p>This is an example blocks module</p>"},{"location":"credentials/#prefect_openai.credentials-classes","title":"Classes","text":""},{"location":"credentials/#prefect_openai.credentials.OpenAICredentials","title":"<code>OpenAICredentials</code>","text":"<p>         Bases: <code>CredentialsBlock</code></p> <p>Credentials used to authenticate with OpenAI.</p> <p>Attributes:</p> Name Type Description <code>api_key</code> <code>SecretStr</code> <p>The API key used to authenticate with OpenAI.</p> Example <p>Load a configured block: <pre><code>from prefect_openai import OpenAICredentials\n\ncredentials = OpenAICredentials.load(\"BLOCK_NAME\")\n</code></pre></p> Source code in <code>prefect_openai/credentials.py</code> <pre><code>class OpenAICredentials(CredentialsBlock):\n\"\"\"\n    Credentials used to authenticate with OpenAI.\n\n    Attributes:\n        api_key: The API key used to authenticate with OpenAI.\n\n    Example:\n        Load a configured block:\n        ```python\n        from prefect_openai import OpenAICredentials\n\n        credentials = OpenAICredentials.load(\"BLOCK_NAME\")\n        ```\n    \"\"\"\n\n    _block_type_name = \"OpenAI Credentials\"\n    _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/QE8JwcbZBmIfiognXDLcY/2bcd4c759f877d37159f576101218b49/open-ai-logo-8B9BFEDC26-seeklogo.com.png?h=250\"  # noqa\n\n    api_key: SecretStr = Field(\n        default=...,\n        title=\"API Key\",\n        description=\"The API key used to authenticate with OpenAI.\",\n    )\n\n    def get_client(self) -&gt; ModuleType:\n\"\"\"\n        Gets the OpenAPI client.\n\n        Returns:\n            The OpenAPI client.\n        \"\"\"\n        openai.api_key = self.api_key.get_secret_value()\n        return openai\n</code></pre>"},{"location":"credentials/#prefect_openai.credentials.OpenAICredentials-functions","title":"Functions","text":""},{"location":"credentials/#prefect_openai.credentials.OpenAICredentials.get_client","title":"<code>get_client</code>","text":"<p>Gets the OpenAPI client.</p> <p>Returns:</p> Type Description <code>ModuleType</code> <p>The OpenAPI client.</p> Source code in <code>prefect_openai/credentials.py</code> <pre><code>def get_client(self) -&gt; ModuleType:\n\"\"\"\n    Gets the OpenAPI client.\n\n    Returns:\n        The OpenAPI client.\n    \"\"\"\n    openai.api_key = self.api_key.get_secret_value()\n    return openai\n</code></pre>"}]}